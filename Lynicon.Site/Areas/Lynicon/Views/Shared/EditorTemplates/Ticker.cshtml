@model System.Decimal
@using Lynicon.Utility

@{
    string modelValue = ViewData.TemplateInfo.FormattedModelValue.ToString();
    if (ViewData.TemplateInfo.FormattedModelValue == ViewData.ModelMetadata.Model)
    {
        modelValue = String.Format(System.Globalization.CultureInfo.CurrentCulture,
                                "{0:0.00}", ViewData.ModelMetadata.Model);
    }
    decimal increment = (ViewData["Increment"] as decimal?) ?? 1.0m;
    int precision = (ViewData["Increment"] as int?) ?? 0;
}

<div class="ticker" data-increment="@increment" data-precision="@precision">
    <span class="text-display">@(string.IsNullOrEmpty(modelValue) ? "---" : modelValue)</span>
    @Html.TextBox("", modelValue, ViewData.ModelMetadata.IsReadOnly ?
(object)new { @class = "text-box single-line " + ViewData["classes"], @readonly = true } :
(object)new { @class = "text-box single-line " + ViewData["classes"] })

    <div class="ticker-buttons">
        <div class="ticker-up action-button">
            <i id="up-@ViewData.TemplateInfo.HtmlFieldPrefix" class="fa fa-caret-up" />
        </div>
        <div class="ticker-down action-button">
            <i id="down-@ViewData.TemplateInfo.HtmlFieldPrefix" class="fa fa-caret-down" />
        </div>
    </div>
</div>
@{
    Html.RegisterScript("lyn_ticker_script",
  @"javascript:
    function incTicker($cont, mult) {
        var inc = parseFloat($cont.data('increment'));
        var prec = parseInt($cont.data('precision'));
        var val = parseFloat($cont.find('input').val());
        if (isNaN(val) || isNaN(inc) || isNaN(prec)) return;
        val += inc * mult;
        val = val.toPrecision(2);
        $cont.find('input').val(val);
        $cont.find('.text-display').text(val);
    }
    $(document).ready(function () {
        $('#edit').on('click', '.ticker-up', function () {
            incTicker($(this).closest('.ticker'), 1);
        }).on('click', '.ticker-down', function () {
            incTicker($(this).closest('.ticker'), -1);
        });
    });
    ", new List<string> { "jquery" });
}

