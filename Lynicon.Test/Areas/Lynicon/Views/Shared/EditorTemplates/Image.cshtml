@model Lynicon.Models.Image
@using Lynicon.Utility;
@using Lynicon.Attributes;
@if (Model != null)
{
    bool showImg = (Model != null && !string.IsNullOrEmpty(Model.Url));
    var avs = (Dictionary<string, object>)ViewData["CollectionAdditionalValues"] ?? ViewData.ModelMetadata.AdditionalValues;
    string getFileInfo = avs.ContainsKey(RequiredCropsAttribute.CropsKey)
        ? (string)avs[RequiredCropsAttribute.CropsKey]
        : null;

    <div class="lyn-image">
        <div class="lyn-image-content" style="@(showImg ? "" : "display:none")">
            @if (!showImg) {
            <span>no image</span>
            } else {
            <div class='file-image-thumb' style="background-image:url(@Model.Url)" />
            }
        </div>
        <div class="lyn-image-url" style="@(showImg ? "display:none" : "")">
            @Html.EditorFor(m => m.Url)
        </div>
        <div class='lyn-image-alt' style="@(showImg ? "display:none" : "")">
            <div class='lyn-image-load' data-get-file-info="@getFileInfo">Find</div>
            <span class="editor-label">Alt</span>
            @Html.EditorFor(m => m.Alt)
            <span class="editor-label">X%</span>
            @Html.EditorFor(m => m.BackgroundXPc)
            <span class="editor-label">Y%</span>
            @Html.EditorFor(m => m.BackgroundYPc)
        </div>
    </div>
}
@Html.Partial("EnsureMediaLibrary")
@Html.RegisterScript("lyn_image_control", "/Areas/Lynicon/Scripts/LyniconImageEditor.js", new List<string> { "jquery" })

