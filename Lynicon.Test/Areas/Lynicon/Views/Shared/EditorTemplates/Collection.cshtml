@using System.Linq
@using System.Collections
@using Lynicon.Utility
@using Lynicon.Models
@{
    int useDepth = ViewData.TemplateInfo.TemplateDepth + ((ViewData["addDepth"] as int?) ?? 0) - 1;
    string closed = "closed";
    if ((ViewData["HeaderRendered" + (useDepth - 1)] as bool?) ?? false)
    {
        closed = "";
    }     
}
<div id="@ViewData.TemplateInfo.HtmlFieldPrefix" class="collection @closed">
@{
    
    int oldInd = (ViewData["indent"] as int?) ?? 0;
    int ind = oldInd + 1;
    int oldCollDepth = (ViewData["collectionDepth"] as int?) ?? -1;
    ViewData["collectionDepth"] = ViewData.TemplateInfo.TemplateDepth;
    
    string oldPrefix = ViewData.TemplateInfo.HtmlFieldPrefix;
    int index = 0;

    ViewData.TemplateInfo.HtmlFieldPrefix = String.Empty;

    ViewData["indent"] = ind;
    int count = Model == null ? 0 : (Model as IEnumerable).Cast<object>().Count();
    Type itemType = ReflectionX.ElementType(Model == null ? ViewData.ModelMetadata.ModelType : Model.GetType());
    string itemHeading = BaseContent.ContentClassDisplayName(itemType);
    string propName = ViewData.ModelMetadata.PropertyName ?? (string)ViewData["propertyPath"];
    if (propName != null && propName.EndsWith("s"))
    {
        if (propName.Contains("."))
        {
            propName = propName.LastAfter(".");
        }
        itemHeading = propName.EndsWith("ies") ? propName.UpToLast("ies") + "y" : propName.UpToLast("s");
    }

    if (count == 0)
    {
        // even for zero count, ensure the markup is built once so that any necessary includes are
        // put on the page
        object dummyItem = ReflectionX.NewOrDefault(itemType);
        Html.EditorFor(m => dummyItem, null, "dummy");
    }
    else
    {
        foreach (object item in (IEnumerable)Model)
        {
            string fieldName = String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}[{1}]", oldPrefix, index);
            string heading = itemHeading;
            if (item is Switchable)
            {
                heading = ((Switchable)item).SelectedProperty.ExpandCamelCase();
            }

            <div class="collection-item-bar editor-label parent child-closed">
                <span class="collection-item-heading editor-label indent-@ind">@heading <span class="index">@(index + 1)</span></span>
                <div id="del-@fieldName" class="action-button delete indent-@ind"><i class="fa fa-times-circle"></i></div>
                <div class="reorder indent-@ind @(index == 0 ? " first" : (index == count - 1 ? " last": "" ))">
                    <div class="reorder-up action-button">
                        <i id="up-@fieldName" class="fa fa-caret-up" />
                    </div>
                    <div class="reorder-down action-button">
                        <i id="down-@fieldName" class="fa fa-caret-down" />
                    </div>
                </div>
            </div>
            <div class="editor-field indent-@ind">
                @Html.EditorFor(m => item, null, fieldName)
            </div>

            index++;
        }
    }

    ViewData["indent"] = oldInd;
    ViewData.TemplateInfo.HtmlFieldPrefix = oldPrefix;
    ViewData["collectionDepth"] = oldCollDepth;
}
</div>

<div id="add-@ViewData.TemplateInfo.HtmlFieldPrefix" class="add-button indent-@ind depth-@ViewData.TemplateInfo.TemplateDepth">+</div>
