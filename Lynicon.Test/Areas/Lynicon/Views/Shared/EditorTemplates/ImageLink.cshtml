@model Lynicon.Models.ImageLink
@using Lynicon.Utility;
@using Lynicon.Attributes;
@if (Model != null)
{
    bool showImg = (Model != null && !string.IsNullOrEmpty(Model.Url));
    var avs = (ViewData.ModelMetadata.AdditionalValues ?? new Dictionary<string, object>()).Merge(ViewData["CollectionAdditionalValues"] as Dictionary<string, object>);
    string getFileInfo = avs.ContainsKey(RequiredCropsAttribute.CropsKey)
        ? (string)avs[RequiredCropsAttribute.CropsKey]
        : null;
    
<div class="lyn-image">
    <div class="lyn-image-content" style="@(showImg ? "" : "display:none")">
        @if (!showImg)
        {
            <span>no image</span>
        }
        else
        {
            <div class='file-image-thumb' style="background-image:url(@Model.Url)" />
        }
    </div>
    <div class="lyn-image-url" style="@(showImg ? "display:none" : "")">
        @Html.EditorFor(m => m.Url)
    </div>
    <div class='lyn-image-alt' style="@(showImg ? "display:none" : "")">
        <button class='lyn-image-load' data-get-file-info="@getFileInfo">Find File</button>
        <span class="editor-label">Alt</span>
        @Html.EditorFor(m => m.Alt)
    </div>
    <div class='lyn-link-url'>
        <span class="editor-label">Link Url</span>
        @Html.EditorFor(m => m.LinkUrl)
    </div>
</div>
}
@Html.Partial("EnsureMediaLibrary")
@Html.RegisterScript("lyn_image_control", "/Areas/Lynicon/Scripts/LyniconImageEditor.js", new List<string> { "jquery" })

